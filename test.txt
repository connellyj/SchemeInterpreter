"knuth"
(define A
  (lambda (k x1 x2 x3 x4 x5)
    (letrec ((B
           (lambda ()
                (begin
                    (set! k (- k 1))
                    (A k B x1 x2 x3 x4)))))
      (if (<= k 0)
          (+ (x4) (x5))
          (B)))))

(A 10 (lambda () 1) (lambda () -1) (lambda () -1) (lambda () 1) (lambda () 0))

(- 3 2 1)
(let ((x 7) (y 3)) y)
(let* ((x 7) (y x)) y)
(define summ
    (lambda (x)
        (if (zero? x)
            0
            (+ x 1 (summ (- x 1))))))
(summ 3)
(letrec ((sum (lambda (x)
                (if (zero? x)
                    0
                    (+ x (sum (- x 1)))))))
        (sum 5))
(define state #f)
state
(define setter
    (lambda ()
        (set! state #t)))
(setter)
state
(define b
    (lambda ()
        (let ((a 2))
            (begin
                (set! a 3)
                a))))
(b)
"and"
(and (if #t #t #t) #f)
(and #f #f)
(and #f #t)
(and #t #t)
"or"
(or (if #t #t #t) #f)
(or #f #f)
(or #f #t)
(or #t #t)
(cond
    (#f 2)
    ((if #t #f #t) 3)
    (else 7))
(cond
    (#f 2)
    ((if #t #f #t) 3)
    #t)
(cond
    (#f 2)
    ((if #t #t #t) 3)
    #t)
(* 2 3)
(* 1 2 3)
(/ 5 2)
(/ 6 3)
(modulo 5 2)
(< 2 4)
(< 4 2)
(> 2 4)
(> 4 2)
(= 2 4)
(= 4 4.0)
